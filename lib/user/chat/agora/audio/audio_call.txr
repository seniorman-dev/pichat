import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:pichat/api/api.dart';
import 'package:pichat/user/chat/agora/const/app_id.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';











class ChatVoiceCall extends StatefulWidget {
  const ChatVoiceCall({Key? key}) : super(key: key);
  //final String channelName;

  @override
  _ChatVoiceCallState createState() => _ChatVoiceCallState();
}

class _ChatVoiceCallState extends State<ChatVoiceCall> {


  String channelName = "jetify"; //for testing purpose
  //String token = "<--Insert authentication token here-->";
  int uid = 0; // uid of the local user
  int? _remoteUid; // uid of the remote user
  bool _isJoined = false; // Indicates if the local user has joined the channel
  late RtcEngine agoraEngine; // Agora engine instance
  
  //global key for nackbar
  final GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>(); // Global key to access the scaffold
  
  //snackbar
  showMessage(String message) {
    scaffoldMessengerKey.currentState?.showSnackBar(SnackBar(
    content: Text(
      message,
      style: GoogleFonts.poppins(
        fontSize: 13.sp
      ),
    ),
    ));
  }
  
  //to be activated in the 'initState' method
  Future<void> setupVoiceSDKEngine() async {

    // retrieve or request microphone permission
    await [Permission.microphone].request();

    // create an instance of the Agora engine
    agoraEngine = createAgoraRtcEngine();
    await agoraEngine.initialize(const RtcEngineContext(
        appId: agora_app_id
    ));

    // Register the event handler
    agoraEngine.registerEventHandler(
      RtcEngineEventHandler(
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          showMessage("Local user uid:${connection.localUid} joined the channel");
          setState(() {
            _isJoined = true;
          });
        },
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          showMessage("Remote user uid:$remoteUid joined the channel");
          setState(() {
            _remoteUid = remoteUid;
          });
        },
        onUserOffline: (RtcConnection connection, int remoteUid, UserOfflineReasonType reason) {
          showMessage("Remote user uid:$remoteUid left the channel");
          setState(() {
            _remoteUid = null;
          });
        },
      ),
    );
  }


  @override
  void initState() {
    super.initState();
    // Set up an instance of Agora engine
    setupVoiceSDKEngine();  
  }

  // Clean up the resources when you leave
  @override
  void dispose() async {
    await agoraEngine.leaveChannel();
    super.dispose();
  }


  // Build UI
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Get started with Voice Calling'),
      ),
      body: ListView(
        padding: EdgeInsets.symmetric(
          horizontal: 16.w, 
          vertical: 4.h
        ),
        children: [

          // Status text
          Container(
            height: 40,
            child:Center(
              child:_status()
            )
          ),
          // Button Row
          Row(
            children: <Widget>[
              Expanded(
                child: ElevatedButton(
                  child: const Text("Join"),
                  onPressed: () => {join()},
                ),
              ),
              const SizedBox(width: 10),
              Expanded(
                child: ElevatedButton(
                  child: const Text("Leave"),
                  onPressed: () => {leave()},
                ),
              ),
            ],
          ),
        ],
      )
    );
  }

  Widget _status(){
    String statusText;

    if (!_isJoined) {
      statusText = 'Join a channel';
    } else if (_remoteUid == null) {
      statusText = 'Waiting for a remote user to join...';
    } else {
      statusText = 'Connected to remote user, uid:$_remoteUid';
    }

    return Text(
      statusText,
    );
  }
  
  //join a voice call
  void  join() async {
    // Set channel options including the client role and channel profile
    ChannelMediaOptions options = const ChannelMediaOptions(
      clientRoleType: ClientRoleType.clientRoleBroadcaster,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    );

    /*await agoraEngine.joinChannel(
      token: "007eJxTYNgtwLz1ZPapR7GxLbtZ385kKjpcbLX0vohn8GPh6BdMDZ8UGBJNDcyTU5INjczNDUyMk5MtU1MNLYyM0wyMzUzSktIsDvx+ktIQyMjwuGcfEyMDBIL4bAxZqSWZaZUMDADG6iIX",  //token,
      channelId: channelName,
      options: options,
      uid: uid,
    );*/

    API().fetchToken(uid: uid, channelName: channelName, agoraEngine: agoraEngine);
  }


  void leave() {
    setState(() {
      _isJoined = false;
      _remoteUid = null;
    });
    agoraEngine.leaveChannel();
  }
}
